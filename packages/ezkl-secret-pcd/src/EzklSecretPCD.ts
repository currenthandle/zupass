import { PCD, PCDPackage, SerializedPCD, StringArgument } from "@pcd/pcd-types";
import JSONBig from "json-bigint";
import { v4 as uuid } from "uuid";
import { EzklSecretCardBody } from "./CardBody";

async function getPoseidonHash() {
  try {
    const module = await import("@ezkljs/engine/web/ezkl");
    const poseidonHash = module.poseidonHash;
    return poseidonHash;
  } catch (err) {
    console.error("Failed to import module:", err);
  }
}

async function getInit() {
  try {
    const module = await import("@ezkljs/engine/web/ezkl");
    const init = module.default;
    return init;
  } catch (err) {
    console.error("Failed to import module:", err);
  }
}
export const EzklSecretPCDTypeName = "ezkl-secret-pcd";

// all fields in Args need to conform to interface Argument from pcd.ts
export interface EzklSecretPCDArgs {
  secret: StringArgument;
}

export interface EzklSecretPCDClaim {
  hash: Uint8ClampedArray;
}

export interface EzklSecretPCDProof {
  // hash: Uint8ClampedArray;
  clearSecret: string;
}

export class EzklSecretPCD
  implements PCD<EzklSecretPCDClaim, EzklSecretPCDProof>
{
  type = EzklSecretPCDTypeName;
  claim: EzklSecretPCDClaim;
  proof: EzklSecretPCDProof;
  id: string;

  public constructor(
    id: string,
    claim: EzklSecretPCDClaim,
    proof: EzklSecretPCDProof
  ) {
    this.id = id;
    this.claim = claim;
    this.proof = proof;
  }
}

// prove args come from PCD Pass autogeneratedn UI
// we'll need userProvided to be true for the secret
export async function prove(args: EzklSecretPCDArgs): Promise<EzklSecretPCD> {
  if (!args.secret.value || args.secret.value === "") {
    throw new Error("Secret is required");
  }

  const init = await getInit();

  if (!init) {
    throw new Error("Init not found");
  }

  await init(
    // undefined,
    "http://localhost:3000/ezkl-artifacts/ezkl_bg.wasm",
    new WebAssembly.Memory({ initial: 20, maximum: 1024, shared: true })
  );

  const poseidonHash = await getPoseidonHash();

  const buffer = new TextEncoder().encode(
    // args.secret.value
    JSONBig().stringify(JSON.parse(args.secret.value))
  );

  const clampedBuffer = new Uint8ClampedArray(buffer);

  if (!poseidonHash) {
    throw new Error("Poseidon hash not found");
  }
  const hash = await poseidonHash(clampedBuffer);

  const claim: EzklSecretPCDClaim = { hash };
  const proof: EzklSecretPCDProof = { clearSecret: args.secret.value };

  return new EzklSecretPCD(uuid(), claim, proof);
}

export async function verify(pcd: EzklSecretPCD): Promise<boolean> {
  // todo also run posidoeon hash
  // const { claim, proof } = pcd;
  // for (let i = 0; i < claim.hash.length; i++) {
  //   if (claim.hash[i] !== proof.hash[i]) {
  //     return false;
  //   }
  // }
  return true;
}

export async function serialize(
  pcd: EzklSecretPCD
): Promise<SerializedPCD<EzklSecretPCD>> {
  return {
    type: EzklSecretPCDTypeName,
    pcd: JSONBig().stringify(pcd)
  } as SerializedPCD<EzklSecretPCD>;
}

export async function deserialize(serialized: string): Promise<EzklSecretPCD> {
  return JSONBig().parse(serialized);
}

// look into this later
export const EzklSecretPCDPackage: PCDPackage<
  EzklSecretPCDClaim,
  EzklSecretPCDProof,
  EzklSecretPCDArgs
> = {
  name: EzklSecretPCDTypeName,
  renderCardBody: EzklSecretCardBody,
  prove,
  verify,
  serialize,
  deserialize
};
